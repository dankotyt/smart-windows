version: '3.8'

services:
  # PostgreSQL 17.4
  postgres:
    image: postgres:17.4
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: smart_windows
      POSTGRES_USER: ${BD_LOGIN}
      POSTGRES_PASSWORD: ${BD_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: "users_db,weather_db,windows_db"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BD_LOGIN} -d smart_windows"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Kafka + Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: microservice-analytics/Dockerfile
    container_name: analytics-service
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smart_windows
      SPRING_DATASOURCE_USERNAME: ${BD_LOGIN}
      SPRING_DATASOURCE_PASSWORD: ${BD_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Notifications Service
  notifications-service:
    build:
      context: .
      dockerfile: microservice-notifications/Dockerfile
    container_name: notifications-service
    ports:
      - "8081:8081"
    env_file:
      - .env
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  # Presets Service
  presets-service:
    build:
      context: .
      dockerfile: microservice-presets/Dockerfile
    container_name: presets-service
    ports:
      - "8082:8082"
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/smart_windows
      SPRING_DATASOURCE_USERNAME: ${BD_LOGIN}
      SPRING_DATASOURCE_PASSWORD: ${BD_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # User Management Service
  user-management-service:
    build:
      context: .
      dockerfile: microservice-user-management/Dockerfile
    container_name: user-management-service
    ports:
      - "8083:8082"
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/users_db?currentSchema=public
      SPRING_DATASOURCE_USERNAME: ${ALL_PRIVILEGES_USER_LOGIN}
      SPRING_DATASOURCE_PASSWORD: ${ALL_PRIVILEGES_USER_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TTL: ${JWT_ACCESS_TTL}
      JWT_REFRESH_TTL: ${JWT_REFRESH_TTL}
      WINDOW_SERVICE_URL: http://window-management-service:8085
    depends_on:
      postgres:
        condition: service_healthy

  # Visual Content Service
  visual-content-service:
    build:
      context: .
      dockerfile: microservice-visual-content/Dockerfile
    container_name: visual-content-service
    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_healthy

  # Weather Service
  weather-service:
    build:
      context: .
      dockerfile: microservice-weather/Dockerfile
    container_name: weather-service
    ports:
      - "8085:8088"
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/weather_db?currentSchema=public
      SPRING_DATASOURCE_USERNAME: ${WEATHER_DB_LOGIN}
      SPRING_DATASOURCE_PASSWORD: ${WEATHER_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      YWAPI_KEY: ${YWAPI_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Window Management Service
  window-management-service:
    build:
      context: .
      dockerfile: microservice-window-management/Dockerfile
    container_name: window-management-service
    ports:
      - "8086:8083"
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/windows_db?currentSchema=public
      SPRING_DATASOURCE_USERNAME: ${WINDOW_DB_LOGIN}
      SPRING_DATASOURCE_PASSWORD: ${WINDOW_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TTL: ${JWT_ACCESS_TTL}
      JWT_REFRESH_TTL: ${JWT_REFRESH_TTL}
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
  kafka_data: