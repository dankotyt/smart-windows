services:
  # Инфраструктура
  postgres:
    image: postgres:17.4
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: smart_windows
      POSTGRES_USER: ${BD_LOGIN}
      POSTGRES_PASSWORD: ${BD_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${BD_LOGIN}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    env_file:
      - .env
    command: redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Kafka + Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Микросервисы
  # Шлюз API
  api-gateway:
    image: smart-windows-api-gateway:${TAG:-latest}
    # container_name: api-gateway
    ports:
      - "8080:8080"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Аналитика
  analytics-service:
    image: smart-windows-analytics-service:${TAG:-latest}
    # container_name: analytics-service
    ports:
      - "8084:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Управление пользователями
  user-management-service:
    image: smart-windows-user-management-service:${TAG:-latest}
    # container_name: user-management-service
    ports:
      - "8082:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Управление пресетами
  preset-service:
    image: smart-windows-presets-service:${TAG:-latest}
    # container_name: preset-service
    ports:
      - "8086:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Погода
  weather-service:
    image: smart-windows-weather-service:${TAG:-latest}
    # container_name: weather-service
    ports:
      - "8088:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Управление окнами
  window-management-service:
    image: smart-windows-window-management-service:${TAG:-latest}
    # container_name: window-management-service
    ports:
      - "8083:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Мониторинг
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - type: bind
        source: ./monitoring/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
    depends_on:
      - api-gateway

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  grafana_data:
